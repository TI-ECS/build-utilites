From a1d9007707559841bac009a08a768abffc2f5e0e Mon Sep 17 00:00:00 2001
From: Ido Yariv <ido@wizery.com>
Date: Mon, 2 Jan 2012 21:42:04 +0200
Subject: [PATCH 4/6] sdio: Add lock-less handlers host claiming function
 *EXPERIMENTAL*

Lock-less handlers which are called without the host being claimed
probably need to claim the host by themselves. In order to avoid a
race with sdio_release_irq, add support for claiming the host and
aborting the claim when the sdio irq is freed.

Signed-off-by: Eliad Peller <eliad@wizery.com>
---
 drivers/mmc/core/sdio_io.c    |   19 +++++++++++++++++++
 include/linux/mmc/sdio_func.h |    4 ++++
 2 files changed, 23 insertions(+)

diff --git a/drivers/mmc/core/sdio_io.c b/drivers/mmc/core/sdio_io.c
index 8f6f5ac..dcc37d9 100644
--- a/drivers/mmc/core/sdio_io.c
+++ b/drivers/mmc/core/sdio_io.c
@@ -34,6 +34,25 @@ void sdio_claim_host(struct sdio_func *func)
 EXPORT_SYMBOL_GPL(sdio_claim_host);
 
 /**
+ *	sdio_claim_host_irq - exclusively claim a bus for a certain SDIO function
+ *	@func: SDIO function that will be accessed
+ *
+ *	Claim a bus for a set of operations. The SDIO function given
+ *	is used to figure out which bus is relevant.
+ *	The function may abort (returing a negative return value) if the sdio
+ *	irq is freed.
+ */
+int sdio_claim_host_irq(struct sdio_func *func)
+{
+	BUG_ON(!func);
+	BUG_ON(!func->card);
+
+	return __mmc_claim_host(func->card->host,
+				&func->card->host->sdio_irq_thread_abort);
+}
+EXPORT_SYMBOL_GPL(sdio_claim_host_irq);
+
+/**
  *	sdio_release_host - release a bus for a certain SDIO function
  *	@func: SDIO function that was accessed
  *
diff --git a/include/linux/mmc/sdio_func.h b/include/linux/mmc/sdio_func.h
index 5bdfffc..b7db154 100644
--- a/include/linux/mmc/sdio_func.h
+++ b/include/linux/mmc/sdio_func.h
@@ -39,6 +39,7 @@ struct sdio_func {
 	struct mmc_card		*card;		/* the card this device belongs to */
 	struct device		dev;		/* the device */
 	sdio_irq_handler_t	*irq_handler;	/* IRQ callback */
+	sdio_irq_handler_t	*irq_handler_ll;/* IRQ callback, called with the host unclaimed */
 	unsigned int		num;		/* function number */
 
 	unsigned char		class;		/* standard interface class */
@@ -117,6 +118,7 @@ extern void sdio_unregister_driver(struct sdio_driver *);
  * SDIO I/O operations
  */
 extern void sdio_claim_host(struct sdio_func *func);
+extern int sdio_claim_host_irq(struct sdio_func *func);
 extern void sdio_release_host(struct sdio_func *func);
 
 extern int sdio_enable_func(struct sdio_func *func);
@@ -125,6 +127,8 @@ extern int sdio_disable_func(struct sdio_func *func);
 extern int sdio_set_block_size(struct sdio_func *func, unsigned blksz);
 
 extern int sdio_claim_irq(struct sdio_func *func, sdio_irq_handler_t *handler);
+extern int sdio_claim_irq_lockless(struct sdio_func *func,
+				   sdio_irq_handler_t *handler);
 extern int sdio_release_irq(struct sdio_func *func);
 extern int sdio_enable_irq(struct sdio_func *func);
 extern int sdio_disable_irq(struct sdio_func *func);
-- 
1.7.9.5

